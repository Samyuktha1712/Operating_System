#include <stdio.h>

typedef struct {
    int process_id;
    int burst_time;
    int remaining_time;
    int priority;
    int completion_time;
    int waiting_time;
    int turnaround_time;
} Process;

void calculateTimes(Process processes[], int n) {
    int current_time = 0;
    int completed = 0;
    int min_priority = 9999;
    int process_index = -1;

    while (completed < n) {
        min_priority = 9999;
        for (int i = 0; i < n; i++) {
            if (processes[i].remaining_time > 0 && processes[i].priority < min_priority) {
                min_priority = processes[i].priority;
                process_index = i;
            }
        }
        processes[process_index].remaining_time--;
        current_time++;

        if (processes[process_index].remaining_time == 0) {
            completed++;
            processes[process_index].completion_time = current_time;
            processes[process_index].turnaround_time = processes[process_index].completion_time;
            processes[process_index].waiting_time = processes[process_index].turnaround_time - processes[process_index].burst_time;
        }
    }
}

void printProcessDetails(Process processes[], int n) {
    printf("\nProcess ID | Burst Time | Priority | Waiting Time | Turnaround Time | Completion Time\n");
    for (int i = 0; i < n; i++) {
        printf("%10d | %10d | %8d | %12d | %15d | %15d\n", 
            processes[i].process_id, processes[i].burst_time, processes[i].priority, processes[i].waiting_time, processes[i].turnaround_time, processes[i].completion_time);
    }
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    Process processes[n];

    for (int i = 0; i < n; i++) {
        processes[i].process_id = i + 1;
        printf("Enter burst time for Process %d: ", i + 1);
        scanf("%d", &processes[i].burst_time);
        processes[i].remaining_time = processes[i].burst_time;
        printf("Enter priority for Process %d: ", i + 1);
        scanf("%d", &processes[i].priority);
    }

    calculateTimes(processes, n);
    printProcessDetails(processes, n);

    int total_waiting_time = 0, total_turnaround_time = 0;
    for (int i = 0; i < n; i++) {
        total_waiting_time += processes[i].waiting_time;
        total_turnaround_time += processes[i].turnaround_time;
    }

    printf("\nAverage Waiting Time: %.2f\n", (float)total_waiting_time / n);
    printf("Average Turnaround Time: %.2f\n", (float)total_turnaround_time / n);

    return 0;
}
